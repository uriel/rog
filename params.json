{"tagline":"A roguelike game library written in Go.","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-33628052-1","name":"Rog","body":"rog\r\n===\r\n![Rog Screenshot](http://github.com/ajhager/rog/raw/master/data/screenshot.png)\r\n\r\n* 24bit color, unicode console with built in font.\r\n* Cross platform windowing via github.com/skelterjohn/go.wde.\r\n* Field of view, lighting, and pathfinding algorithms.\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n    \"github.com/ajhager/rog\"\r\n)\r\n\r\nfunc main() {\r\n    rog.Open(48, 32, \"rog\")\r\n    for rog.IsOpen() {\r\n        rog.Set(20, 15, nil, nil, \"Hello, 世界\")\r\n        if rog.Key == \"escape\" {\r\n            rog.Close()\r\n        }\r\n        rog.Flush()\r\n    }\r\n}\r\n```\r\n\r\nNotes\r\n-----\r\n* On Windows you can build your project with `go build -ldflags -Hwindowsgui` to inhibit the console window that pops up by default.\r\n\r\nThanks\r\n------\r\n* libTCOD [http://doryen.eptalys.net/libtcod/]\r\n* John Asmuth [http://github.com/skelterjohn/go.wde]\r\n* Yamamushi [http://www.theasciiproject.com/]\r\n\r\nPlans\r\n-----\r\n* Pathfinding.\r\n* World generation.\r\n* User supplied font sets and tilemaps.\r\n* Noise generators.\r\n* Image scale and blitting.\r\n* Console to console blitting.\r\n* Fold lighting into the library.\r\n* Test suite.\r\n"}